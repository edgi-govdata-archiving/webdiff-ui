{"version":3,"sources":["../src/replaceJsxExpressionContainer.js"],"names":["t","path","styleNameAttribute","importedHelperIndentifier","styleModuleImportMapIdentifier","expressionContainerValue","value","classNameAttribute","node","openingElement","attributes","find","attribute","name","splice","indexOf","styleNameExpression","callExpression","expression","push","stringLiteral","Error"],"mappings":";;;;;;AAEA;;;;;;kBAYe,CACbA,CADa,EAEbC,IAFa,EAGbC,kBAHa,EAIbC,yBAJa,EAKbC,8BALa,KAMJ;AACT,QAAMC,2BAA2BH,mBAAmBI,KAApD;AACA,QAAMC,qBAAqBN,KAAKO,IAAL,CAAUC,cAAV,CAAyBC,UAAzB,CACxBC,IADwB,CAClBC,SAAD,IAAe;AACnB,WAAO,OAAOA,UAAUC,IAAjB,KAA0B,WAA1B,IAAyCD,UAAUC,IAAV,CAAeA,IAAf,KAAwB,WAAxE;AACD,GAHwB,CAA3B;;AAKA,MAAIN,kBAAJ,EAAwB;AACtBN,SAAKO,IAAL,CAAUC,cAAV,CAAyBC,UAAzB,CAAoCI,MAApC,CAA2Cb,KAAKO,IAAL,CAAUC,cAAV,CAAyBC,UAAzB,CAAoCK,OAApC,CAA4CR,kBAA5C,CAA3C,EAA4G,CAA5G;AACD;;AAEDN,OAAKO,IAAL,CAAUC,cAAV,CAAyBC,UAAzB,CAAoCI,MAApC,CAA2Cb,KAAKO,IAAL,CAAUC,cAAV,CAAyBC,UAAzB,CAAoCK,OAApC,CAA4Cb,kBAA5C,CAA3C,EAA4G,CAA5G;;AAEA,QAAMc,sBAAsBhB,EAAEiB,cAAF,CAC1Bd,yBAD0B,EAE1B,CACEE,yBAAyBa,UAD3B,EAEEd,8BAFF,CAF0B,CAA5B;;AAQA,MAAIG,kBAAJ,EAAwB;AACtB,QAAI,iCAAgBA,mBAAmBD,KAAnC,CAAJ,EAA+C;AAC7CL,WAAKO,IAAL,CAAUC,cAAV,CAAyBC,UAAzB,CAAoCS,IAApC,CAAyC,8BACvC,+BAAc,WAAd,CADuC,EAEvC,wCACE,kCACE,GADF,EAEEnB,EAAEoB,aAAF,CAAgBb,mBAAmBD,KAAnB,CAAyBA,KAAzB,GAAiC,GAAjD,CAFF,EAGEU,mBAHF,CADF,CAFuC,CAAzC;AAUD,KAXD,MAWO,IAAI,0CAAyBT,mBAAmBD,KAA5C,CAAJ,EAAwD;AAC7DL,WAAKO,IAAL,CAAUC,cAAV,CAAyBC,UAAzB,CAAoCS,IAApC,CAAyC,8BACvC,+BAAc,WAAd,CADuC,EAEvC,wCACE,kCACE,GADF,EAEEZ,mBAAmBD,KAAnB,CAAyBY,UAF3B,EAGE,kCACE,GADF,EAEE,+BAAc,GAAd,CAFF,EAGEF,mBAHF,CAHF,CADF,CAFuC,CAAzC;AAcD,KAfM,MAeA;AACL,YAAM,IAAIK,KAAJ,CAAU,6BAAV,CAAN;AACD;AACF,GA9BD,MA8BO;AACLpB,SAAKO,IAAL,CAAUC,cAAV,CAAyBC,UAAzB,CAAoCS,IAApC,CAAyC,8BACvC,+BAAc,WAAd,CADuC,EAEvC,wCACEH,mBADF,CAFuC,CAAzC;AAMD;AACF,C","file":"replaceJsxExpressionContainer.js","sourcesContent":["// @flow\n\nimport BabelTypes, {\n  binaryExpression,\n  Identifier,\n  isJSXExpressionContainer,\n  isStringLiteral,\n  jSXAttribute,\n  JSXAttribute,\n  jSXExpressionContainer,\n  jSXIdentifier,\n  stringLiteral\n} from 'babel-types';\n\nexport default (\n  t: BabelTypes,\n  path: Object,\n  styleNameAttribute: JSXAttribute,\n  importedHelperIndentifier: Identifier,\n  styleModuleImportMapIdentifier: Identifier\n): void => {\n  const expressionContainerValue = styleNameAttribute.value;\n  const classNameAttribute = path.node.openingElement.attributes\n    .find((attribute) => {\n      return typeof attribute.name !== 'undefined' && attribute.name.name === 'className';\n    });\n\n  if (classNameAttribute) {\n    path.node.openingElement.attributes.splice(path.node.openingElement.attributes.indexOf(classNameAttribute), 1);\n  }\n\n  path.node.openingElement.attributes.splice(path.node.openingElement.attributes.indexOf(styleNameAttribute), 1);\n\n  const styleNameExpression = t.callExpression(\n    importedHelperIndentifier,\n    [\n      expressionContainerValue.expression,\n      styleModuleImportMapIdentifier\n    ]\n  );\n\n  if (classNameAttribute) {\n    if (isStringLiteral(classNameAttribute.value)) {\n      path.node.openingElement.attributes.push(jSXAttribute(\n        jSXIdentifier('className'),\n        jSXExpressionContainer(\n          binaryExpression(\n            '+',\n            t.stringLiteral(classNameAttribute.value.value + ' '),\n            styleNameExpression\n          )\n        )\n      ));\n    } else if (isJSXExpressionContainer(classNameAttribute.value)) {\n      path.node.openingElement.attributes.push(jSXAttribute(\n        jSXIdentifier('className'),\n        jSXExpressionContainer(\n          binaryExpression(\n            '+',\n            classNameAttribute.value.expression,\n            binaryExpression(\n              '+',\n              stringLiteral(' '),\n              styleNameExpression\n            )\n          )\n        )\n      ));\n    } else {\n      throw new Error('Unexpected attribute value.');\n    }\n  } else {\n    path.node.openingElement.attributes.push(jSXAttribute(\n      jSXIdentifier('className'),\n      jSXExpressionContainer(\n        styleNameExpression\n      )\n    ));\n  }\n};\n"]}