{"version":3,"sources":["../src/resolveStringLiteral.js"],"names":["path","styleModuleImportMap","styleNameAttribute","classNameAttribute","node","openingElement","attributes","find","attribute","name","resolvedStyleName","value","expression","Error","splice","indexOf"],"mappings":";;;;;;AAEA;;AAOA;;;;;;AAKA;;;kBAGe,CAACA,IAAD,EAAeC,oBAAf,EAA+DC,kBAA/D,KAA0G;AACvH,QAAMC,qBAAqBH,KAAKI,IAAL,CAAUC,cAAV,CAAyBC,UAAzB,CACxBC,IADwB,CAClBC,SAAD,IAAe;AACnB,WAAO,OAAOA,UAAUC,IAAjB,KAA0B,WAA1B,IAAyCD,UAAUC,IAAV,CAAeA,IAAf,KAAwB,WAAxE;AACD,GAHwB,CAA3B;;AAKA,QAAMC,oBAAoB,4BAAaR,mBAAmBS,KAAnB,CAAyBA,KAAtC,EAA6CV,oBAA7C,CAA1B;;AAEA,MAAIE,kBAAJ,EAAwB;AACtB,QAAI,iCAAgBA,mBAAmBQ,KAAnC,CAAJ,EAA+C;AAC7CR,yBAAmBQ,KAAnB,CAAyBA,KAAzB,IAAkC,MAAMD,iBAAxC;AACD,KAFD,MAEO,IAAI,0CAAyBP,mBAAmBQ,KAA5C,CAAJ,EAAwD;AAC7DR,yBAAmBQ,KAAnB,CAAyBC,UAAzB,GAAsC,kCACpC,GADoC,EAEpCT,mBAAmBQ,KAAnB,CAAyBC,UAFW,EAGpC,+BAAc,MAAMF,iBAApB,CAHoC,CAAtC;AAKD,KANM,MAMA;AACL,YAAM,IAAIG,KAAJ,CAAU,6BAAV,CAAN;AACD;;AAEDb,SAAKI,IAAL,CAAUC,cAAV,CAAyBC,UAAzB,CAAoCQ,MAApC,CAA2Cd,KAAKI,IAAL,CAAUC,cAAV,CAAyBC,UAAzB,CAAoCS,OAApC,CAA4Cb,kBAA5C,CAA3C,EAA4G,CAA5G;AACD,GAdD,MAcO;AACLA,uBAAmBO,IAAnB,CAAwBA,IAAxB,GAA+B,WAA/B;AACAP,uBAAmBS,KAAnB,CAAyBA,KAAzB,GAAiCD,iBAAjC;AACD;AACF,C","file":"resolveStringLiteral.js","sourcesContent":["// @flow\n\nimport {\n  binaryExpression,\n  isJSXExpressionContainer,\n  isStringLiteral,\n  JSXAttribute,\n  stringLiteral\n} from 'babel-types';\nimport getClassName from './getClassName';\nimport type {\n  StyleModuleImportMapType\n} from './types';\n\n/**\n * Updates the className value of a JSX element using a provided styleName attribute.\n */\nexport default (path: Object, styleModuleImportMap: StyleModuleImportMapType, styleNameAttribute: JSXAttribute): void => {\n  const classNameAttribute = path.node.openingElement.attributes\n    .find((attribute) => {\n      return typeof attribute.name !== 'undefined' && attribute.name.name === 'className';\n    });\n\n  const resolvedStyleName = getClassName(styleNameAttribute.value.value, styleModuleImportMap);\n\n  if (classNameAttribute) {\n    if (isStringLiteral(classNameAttribute.value)) {\n      classNameAttribute.value.value += ' ' + resolvedStyleName;\n    } else if (isJSXExpressionContainer(classNameAttribute.value)) {\n      classNameAttribute.value.expression = binaryExpression(\n        '+',\n        classNameAttribute.value.expression,\n        stringLiteral(' ' + resolvedStyleName)\n      );\n    } else {\n      throw new Error('Unexpected attribute value.');\n    }\n\n    path.node.openingElement.attributes.splice(path.node.openingElement.attributes.indexOf(styleNameAttribute), 1);\n  } else {\n    styleNameAttribute.name.name = 'className';\n    styleNameAttribute.value.value = resolvedStyleName;\n  }\n};\n"]}