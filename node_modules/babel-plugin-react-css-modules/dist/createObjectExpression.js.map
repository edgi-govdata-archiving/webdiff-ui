{"version":3,"sources":["../src/createObjectExpression.js"],"names":["createObjectExpression","t","object","properties","name","Object","keys","value","newValue","isAnyTypeAnnotation","stringLiteral","Error","push","objectProperty","identifier","objectExpression"],"mappings":";;;;;;AAEA;;;;;;AAQA;;;AAGA,MAAMA,yBAAyB,CAACC,CAAD,EAAgBC,MAAhB,KAA8D;AAC3F,QAAMC,aAAa,EAAnB;;AAEA,OAAK,MAAMC,IAAX,IAAmBC,OAAOC,IAAP,CAAYJ,MAAZ,CAAnB,EAAwC;AACtC,UAAMK,QAAQL,OAAOE,IAAP,CAAd;;AAEA,QAAII,QAAJ;;AAEA;AACA,QAAIP,EAAEQ,mBAAF,CAAsBF,KAAtB,CAAJ,EAAkC,CAEjC,CAFD,MAEO,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AACpCC,iBAAWP,EAAES,aAAF,CAAgBH,KAAhB,CAAX;AACD,KAFM,MAEA,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AACpCC,iBAAWR,uBAAuBC,CAAvB,EAA0BM,KAA1B,CAAX;AACD,KAFM,MAEA;AACL,YAAM,IAAII,KAAJ,CAAU,kBAAV,CAAN;AACD;;AAEDR,eAAWS,IAAX,CACEX,EAAEY,cAAF,CACEZ,EAAEa,UAAF,CAAa,OAAOV,IAAP,GAAc,IAA3B,CADF,EAEEI,QAFF,CADF;AAMD;;AAED,SAAOP,EAAEc,gBAAF,CAAmBZ,UAAnB,CAAP;AACD,CA5BD;;kBA8BeH,sB","file":"createObjectExpression.js","sourcesContent":["// @flow\n\nimport BabelTypes, {\n  ObjectExpression\n} from 'babel-types';\n\ntype InputObjectType = {\n  [key: string]: string | InputObjectType\n};\n\n/**\n * Creates an AST representation of an InputObjectType shape object.\n */\nconst createObjectExpression = (t: BabelTypes, object: InputObjectType): ObjectExpression => {\n  const properties = [];\n\n  for (const name of Object.keys(object)) {\n    const value = object[name];\n\n    let newValue;\n\n    // eslint-disable-next-line no-empty\n    if (t.isAnyTypeAnnotation(value)) {\n\n    } else if (typeof value === 'string') {\n      newValue = t.stringLiteral(value);\n    } else if (typeof value === 'object') {\n      newValue = createObjectExpression(t, value);\n    } else {\n      throw new Error('Unexpected type.');\n    }\n\n    properties.push(\n      t.objectProperty(\n        t.identifier('\\'' + name + '\\''),\n        newValue\n      )\n    );\n  }\n\n  return t.objectExpression(properties);\n};\n\nexport default createObjectExpression;\n"]}